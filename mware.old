import { NextRequest, NextResponse } from "next/server";
import { getSessionCookie } from "better-auth/cookies";

// (Opcional) Mini cache de sessão por request ID (funciona apenas durante uma instância em execução)
const sessionCache = new Map<string, boolean>();

export async function middleware(request: NextRequest) {
  const { pathname } = request.nextUrl;

  // Evitar múltiplas leituras
  const cookieHeader = request.headers.get("cookie") || "";
  //const hasDetailsCookie = request.cookies.get("hasDetails");
  const cacheKey = request.headers.get("x-request-id") || cookieHeader;

  // ✅ Verificação de sessão com cache temporário in-memory
  let hasSession = sessionCache.get(cacheKey);
  if (hasSession === undefined) {
    const sessionCookie = getSessionCookie(request);
    hasSession = !!sessionCookie;
    sessionCache.set(cacheKey, hasSession);
  }

  // === REGRAS DE REDIRECIONAMENTO ===

  // 1. Está na raiz (/) e tem sessão → redireciona para dashboard
  if (pathname === "/" && hasSession) {
    return NextResponse.redirect(new URL("/dashboard", request.url));
  }

  // 2. Está no dashboard e não tem sessão → volta para login
  if (pathname.startsWith("/dashboard") && !hasSession) {
    return NextResponse.redirect(new URL("/", request.url));
  }

  // 3. Está em /dashboard mas ainda não tem os detalhes → redireciona para /user-details
  // if (
  //   pathname.startsWith("/dashboard") &&
  //   hasSession &&
  //   !hasDetailsCookie &&
  //   pathname !== "/user-details"
  // ) {
  //   return NextResponse.redirect(new URL("/user-details", request.url));
  // }

  // 4. Está em /user-details mas já tem detalhes → redireciona para /dashboard
  // if (pathname === "/user-details" && hasDetailsCookie) {
  //   return NextResponse.redirect(new URL("/dashboard", request.url));
  // }

  return NextResponse.next();
}

export const config = {
  matcher: ["/", "/dashboard/:path*", "/user-details"],
};
